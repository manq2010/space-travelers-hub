/* eslint-disable no-param-reassign */
// Import createSlice() from Redux toolkit:
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from '../../axios';

// Initial state for Redux store:
const initialState = {
  missions: [],
  isLoading: true,
  isMember: true,
  status: 'idle',
  error: '',
};

export const fetchMissions = createAsyncThunk(
  'missions/fetchMissions',
  async () => {
    const response = await axios.get('/missions');
    const missionsArray = Object.keys(response.data).map((key) => ({
      mission_id: key,
      ...response.data[key],
    }));
    const missions = missionsArray.map((mission) => ({
      reserved: false,
      mission_id: mission.mission_id,
      mission_name: mission.mission_name,
      description: mission.description,
    }));

    return missions.slice().sort((a, b) => a.mission_id - b.mission_id);
  },
);

// Create Redux state slice
const missionSlice = createSlice({
  name: 'missions',
  initialState, // Define initial state
  reducers: {
    // Define reducers
    joinMission: (state, action) => {
      state.missions.map((mission) => (mission.mission_id !== action.payload
        ? mission : { ...mission, reserved: true }));
    },
    leaveMission: (state, action) => {
      state.missions.map((mission) => (mission.mission_id !== action.payload
        ? mission : { ...mission, reserved: false }));
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchMissions.pending, (state) => {
        state.isLoading = true;
        state.status = 'loading';
      })
      .addCase(fetchMissions.fulfilled, (state, action) => {
        state.isLoading = false;
        state.missions = action.payload;
        state.status = 'succeeded';
      })
      .addCase(fetchMissions.rejected, (state, action) => {
        state.isLoading = false;
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

// Export actions generated by "createSlice()":
export const { membership, joinMission, leaveMission } = missionSlice.actions;

// Export reducer generated by "createSlice()":
export default missionSlice.reducer;
